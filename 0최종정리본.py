# -*- coding: utf-8 -*-
"""0최종정리본.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BH8JxMB65Go99jUymrYlyrFLSoEvpzOh

#import
"""

#한글폰트
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

# 구글 드라이브 연결
from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

#한글폰트 이름 찾기
from matplotlib import font_manager

!apt install fonts-nanum

for font in font_manager.fontManager.ttflist:
    if 'Nanum' in font.name:
        print(font.name, font.fname)

"""# data 전처리

###* 데이터 불러오기
"""

#train

#train_input
number=range(1,10)
li=[]
for num in number:
    path='/content/drive/MyDrive/AI_competition/train_input/CASE_0%d.csv'%num
    df = pd.read_csv(path, index_col=None, header=0)
    df['case']=''
    df=df.replace('','CASE_0%d'%num)
    li.append(df)
frame1 = pd.concat(li, axis=0, ignore_index=True)

number1=range(10,59)
li=[]
for num in number1:
    path='/content/drive/MyDrive/AI_competition/train_input/CASE_%d.csv'%num
    df = pd.read_csv(path, index_col=None, header=0)
    df['case']=''
    df=df.replace('','CASE_%d'%num)
    li.append(df)
frame2=pd.concat(li,axis=0,ignore_index=True)

train_input=pd.concat([frame1,frame2],axis=0)

#train_target
number=range(1,10)
li=[]
for num in number:
    path='/content/drive/MyDrive/AI_competition/train_target/CASE_0%d.csv'%num
    df = pd.read_csv(path, index_col=None, header=0)
    df['case']=''
    df=df.replace('','CASE_0%d'%num)
    li.append(df)
frame3=pd.concat(li,axis=0,ignore_index=True)

number1=range(10,59)
li=[]
for num in number1:
    path='/content/drive/MyDrive/AI_competition/train_target/CASE_%d.csv'%num
    df = pd.read_csv(path, index_col=None, header=0)
    df['case']=''
    df=df.replace('','CASE_%d'%num)
    li.append(df)
frame4=pd.concat(li,axis=0,ignore_index=True)

train_target=pd.concat([frame3,frame4],axis=0)

#test

#test_input
number=range(1,7)
li=[]
for num in number:
    path='/content/drive/MyDrive/AI_competition/test_input/TEST_0%d.csv'%num
    df = pd.read_csv(path, index_col=None, header=0)
    df['case']=''
    df=df.replace('','CASE_0%d'%num)
    li.append(df)
test_input=pd.concat(li,axis=0,ignore_index=True)
#test_target
number=range(1,7)
li=[]
for num in number:
    path='/content/drive/MyDrive/AI_competition/test_target/TEST_0%d.csv'%num
    df = pd.read_csv(path, index_col=None, header=0)
    df['case']=''
    df=df.replace('','CASE_0%d'%num)
    li.append(df)
test_target=pd.concat(li,axis=0,ignore_index=True)

"""###* 데이터 살펴보기"""

train_input.info()

test_input.info()

train_input.columns.to_list()

test_input.columns.to_list()

print(len(train_input.columns.to_list()))
print(len(test_input.columns.to_list()))

#train input에는 test input에 없는 '펌프작동남은시간.1'이 있음

"""###* '펌프작동남은시간.1' 처리"""

np.sort(train_input['펌프작동남은시간.1' ].unique())

np.sort(train_input['펌프작동남은시간' ].unique())

np.sort(test_input['펌프작동남은시간' ].unique())

type(np.sort(test_input['펌프작동남은시간' ].unique()))

a = set(np.sort(train_input['펌프작동남은시간.1' ].unique()))
b = set(np.sort(test_input['펌프작동남은시간' ].unique()))
a&b

#train input에서의 '펌프작동남은시간.1'와 test input에서 '펌프작동남은시간' 
#겹치는 값이 없으므로 train input에서 '펌프작동남은시간.1'를 제거해준다.

"""###* 이상치 처리"""

#train_input에서 이상치 존재 확인

mpl.rc('font', size = 10)
mpl.rc('axes', titlesize = 10)
figure, axes = plt.subplots(nrows = 14, ncols = 3)
plt.tight_layout()
figure.set_size_inches(50,50)

sns.boxplot(y='내부온도관측치', data = train_input, ax=axes[0,0])
sns.boxplot(y='내부습도관측치',   data = train_input, ax=axes[0,1])
sns.boxplot(y='CO2관측치',   data = train_input, ax=axes[0,2])
sns.boxplot(y='EC관측치',   data = train_input, ax=axes[1,0])
sns.boxplot(y='외부온도관측치',   data = train_input, ax=axes[1,1])
sns.boxplot(y='외부습도관측치',   data = train_input, ax=axes[1,2])
sns.boxplot(y='펌프상태',   data = train_input, ax=axes[2,0])
sns.boxplot(y='펌프작동남은시간',   data = train_input, ax=axes[2,1])
sns.boxplot(y='최근분무량',   data = train_input, ax=axes[2,2])
sns.boxplot(y='일간누적분무량',   data = train_input, ax=axes[3,0])
sns.boxplot(y='냉방상태',   data = train_input, ax=axes[3,1])
sns.boxplot(y='냉방작동남은시간',   data = train_input, ax=axes[3,2])
sns.boxplot(y='난방상태',   data = train_input, ax=axes[4,0])
sns.boxplot(y='난방작동남은시간',   data = train_input, ax=axes[4,1])
sns.boxplot(y='내부유동팬상태',   data = train_input, ax=axes[4,2])
sns.boxplot(y='내부유동팬작동남은시간',   data = train_input, ax=axes[5,0])
sns.boxplot(y='외부환기팬상태',   data = train_input, ax=axes[5,1])
sns.boxplot(y='외부환기팬작동남은시간',   data = train_input, ax=axes[5,2])
sns.boxplot(y='화이트 LED상태',   data = train_input, ax=axes[6,0])
sns.boxplot(y='화이트 LED작동남은시간',   data = train_input, ax=axes[6,1])
sns.boxplot(y='화이트 LED동작강도',   data = train_input, ax=axes[6,2])
sns.boxplot(y='레드 LED상태',   data = train_input, ax=axes[7,0])
sns.boxplot(y='레드 LED작동남은시간',   data = train_input, ax=axes[7,1])
sns.boxplot(y='레드 LED동작강도',   data = train_input, ax=axes[7,2])
sns.boxplot(y='블루 LED상태',   data = train_input, ax=axes[8,0])
sns.boxplot(y='블루 LED작동남은시간',   data = train_input, ax=axes[8,1])
sns.boxplot(y='블루 LED동작강도',   data = train_input, ax=axes[8,2])
sns.boxplot(y='카메라상태',   data = train_input, ax=axes[9,0])
sns.boxplot(y='냉방온도',   data = train_input, ax=axes[9,1])
sns.boxplot(y='난방온도',   data = train_input, ax=axes[9,2])
sns.boxplot(y='기준온도',   data = train_input, ax=axes[10,0])
sns.boxplot(y='난방부하',   data = train_input, ax=axes[10,1])
sns.boxplot(y='냉방부하',   data = train_input, ax=axes[10,2])
sns.boxplot(y='총추정광량',   data = train_input, ax=axes[11,0])
sns.boxplot(y='백색광추정광량',   data = train_input, ax=axes[11,1])
sns.boxplot(y='적색광추정광량',   data = train_input, ax=axes[11,2])
sns.boxplot(y='청색광추정광량',   data = train_input, ax=axes[12,0])
sns.boxplot(y='펌프작동남은시간.1',   data = train_input, ax=axes[12,1])
sns.boxplot(y='외부온도추정관측치',   data = train_input, ax=axes[12,2])
sns.boxplot(y='외부습도추정관측치',   data = train_input, ax=axes[13,0])
sns.boxplot(y='펌프최근분무량',   data = train_input, ax=axes[13,1])
sns.boxplot(y='펌프일간누적분무량',   data = train_input, ax=axes[13,2])

#train_input에서 이상치 제거 후 boxplot

def remove_out(dataframe, remove_col):
    dff = dataframe
    for k in remove_col:
        level_1q = dff[k].quantile(0.25)
        level_3q = dff[k].quantile(0.75)
        IQR = level_3q - level_1q
        dff = dff[(dff[k] <= level_3q + (1.5* IQR)) & (dff[k] >= level_1q - (1.5 * IQR))]
        dff = dff.reset_index(drop=True)
    return dff

a = ['내부온도관측치','내부습도관측치', 'CO2관측치', 'EC관측치', '외부온도관측치','외부습도관측치','펌프상태',
     '펌프작동남은시간', '최근분무량','일간누적분무량','냉방상태','냉방작동남은시간','난방상태','난방작동남은시간',
     '내부유동팬상태','내부유동팬작동남은시간','외부환기팬상태','외부환기팬작동남은시간','화이트 LED상태','화이트 LED작동남은시간',
     '화이트 LED동작강도','레드 LED상태','레드 LED작동남은시간','레드 LED동작강도', '블루 LED상태','블루 LED작동남은시간', '블루 LED동작강도',
     '카메라상태' ,'냉방온도','난방온도','기준온도','난방부하','냉방부하','총추정광량', '백색광추정광량','적색광추정광량','청색광추정광량']
train_input_removed = remove_out(train_input, a)

mpl.rc('font', size = 10)
mpl.rc('axes', titlesize = 10)
figure, axes = plt.subplots(nrows = 13, ncols = 3)
plt.tight_layout()
figure.set_size_inches(50,50)
plt.rc('font', family = 'NanumSquare')

sns.boxplot(y='내부온도관측치', data = train_input_removed, ax=axes[0,0])
sns.boxplot(y='내부습도관측치',   data = train_input_removed, ax=axes[0,1])
sns.boxplot(y='CO2관측치',   data = train_input_removed, ax=axes[0,2])
sns.boxplot(y='EC관측치',   data = train_input_removed, ax=axes[1,0])
sns.boxplot(y='외부온도관측치',   data = train_input_removed, ax=axes[1,1])
sns.boxplot(y='외부습도관측치',   data = train_input_removed, ax=axes[1,2])
sns.boxplot(y='펌프상태',   data = train_input_removed, ax=axes[2,0])
sns.boxplot(y='펌프작동남은시간',   data = train_input_removed, ax=axes[2,1])
sns.boxplot(y='최근분무량',   data = train_input_removed, ax=axes[2,2])
sns.boxplot(y='일간누적분무량',   data = train_input_removed, ax=axes[3,0])
sns.boxplot(y='냉방상태',   data = train_input_removed, ax=axes[3,1])
sns.boxplot(y='냉방작동남은시간',   data = train_input_removed, ax=axes[3,2])
sns.boxplot(y='난방상태',   data = train_input_removed, ax=axes[4,0])
sns.boxplot(y='난방작동남은시간',   data = train_input_removed, ax=axes[4,1])
sns.boxplot(y='내부유동팬상태',   data = train_input_removed, ax=axes[4,2])
sns.boxplot(y='내부유동팬작동남은시간',   data = train_input_removed, ax=axes[5,0])
sns.boxplot(y='외부환기팬상태',   data = train_input_removed, ax=axes[5,1])
sns.boxplot(y='외부환기팬작동남은시간',   data = train_input_removed, ax=axes[5,2])
sns.boxplot(y='화이트 LED상태',   data = train_input_removed, ax=axes[6,0])
sns.boxplot(y='화이트 LED작동남은시간',   data = train_input_removed, ax=axes[6,1])
sns.boxplot(y='화이트 LED동작강도',   data = train_input_removed, ax=axes[6,2])
sns.boxplot(y='레드 LED상태',   data = train_input_removed, ax=axes[7,0])
sns.boxplot(y='레드 LED작동남은시간',   data = train_input_removed, ax=axes[7,1])
sns.boxplot(y='레드 LED동작강도',   data = train_input_removed, ax=axes[7,2])
sns.boxplot(y='블루 LED상태',   data = train_input_removed, ax=axes[8,0])
sns.boxplot(y='블루 LED작동남은시간',   data = train_input_removed, ax=axes[8,1])
sns.boxplot(y='블루 LED동작강도',   data = train_input_removed, ax=axes[8,2])
sns.boxplot(y='카메라상태',   data = train_input_removed, ax=axes[9,0])
sns.boxplot(y='냉방온도',   data = train_input_removed, ax=axes[9,1])
sns.boxplot(y='난방온도',   data = train_input_removed, ax=axes[9,2])
sns.boxplot(y='기준온도',   data = train_input_removed, ax=axes[10,0])
sns.boxplot(y='난방부하',   data = train_input_removed, ax=axes[10,1])
sns.boxplot(y='냉방부하',   data = train_input_removed, ax=axes[10,2])
sns.boxplot(y='총추정광량',   data = train_input_removed, ax=axes[11,0])
sns.boxplot(y='백색광추정광량',   data = train_input_removed, ax=axes[11,1])
sns.boxplot(y='적색광추정광량',   data = train_input_removed, ax=axes[11,2])
sns.boxplot(y='청색광추정광량',   data = train_input_removed, ax=axes[12,0])

import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt

def remove_out(dataframe, remove_col):
    dff = dataframe
    for k in remove_col:
        level_1q = dff[k].quantile(0.25)
        level_3q = dff[k].quantile(0.75)
        IQR = level_3q - level_1q
        dff = dff[(dff[k] <= level_3q + (1.5* IQR)) & (dff[k] >= level_1q - (1.5 * IQR))]
        dff = dff.reset_index(drop=True)
    return dff

b = ['외부온도추정관측치','외부습도추정관측치','펌프최근분무량','펌프일간누적분무량']
train_input_removed1 = remove_out(train_input, b)

mpl.rc('font', size = 10)
mpl.rc('axes', titlesize = 10)
figure, axes = plt.subplots(nrows = 2, ncols = 2)
plt.tight_layout()
figure.set_size_inches(10,10)
plt.rc('font', family = 'NanumSquare')

sns.boxplot(y='외부온도추정관측치',   data = train_input_removed1, ax=axes[0,0])
sns.boxplot(y='외부습도추정관측치',   data = train_input_removed1, ax=axes[0,1])
sns.boxplot(y='펌프최근분무량',   data = train_input_removed1, ax=axes[1,0])
sns.boxplot(y='펌프일간누적분무량',   data = train_input_removed1, ax=axes[1,1])

#'펌프상태', '펌프작동남은시간', '냉방상태', '난방상태', '난방작동남은시간', 
#'내부유동팬상태',  '내부유동팬작동남은시간', '외부환기팬상태', '외부환기팬작동남은시간', 
#'화이트 LED상태', '레드 LED상태', '레드 LED동작강도', '블루 LED상태', '블루 LED동작강도', 
#'카메라상태', '난방부하', '적색광추정광량', '청색광추정광량'

#위 변수들에서 이상치 제거했을 때, boxplot을 그렸을 때, 비정상적으로 나와 해당 변수를 제거해줌

def remove_out(dataframe, remove_col):
    dff = dataframe
    for k in remove_col:
        level_1q = dff[k].quantile(0.25)
        level_3q = dff[k].quantile(0.75)
        IQR = level_3q - level_1q
        dff = dff[(dff[k] <= level_3q + (1.5* IQR)) & (dff[k] >= level_1q - (1.5 * IQR))]
        dff = dff.reset_index(drop=True)
    return dff

a = ['내부온도관측치','내부습도관측치', 'CO2관측치', 'EC관측치', '외부온도관측치','외부습도관측치','펌프상태',
     '펌프작동남은시간', '최근분무량','일간누적분무량','냉방상태','냉방작동남은시간','난방상태','난방작동남은시간',
     '내부유동팬상태','내부유동팬작동남은시간','외부환기팬상태','외부환기팬작동남은시간','화이트 LED상태','화이트 LED작동남은시간',
     '화이트 LED동작강도','레드 LED상태','레드 LED작동남은시간','레드 LED동작강도', '블루 LED상태','블루 LED작동남은시간', '블루 LED동작강도',
     '카메라상태' ,'냉방온도','난방온도','기준온도','난방부하','냉방부하','총추정광량', '백색광추정광량','적색광추정광량','청색광추정광량',
     '외부온도추정관측치', '외부습도추정관측치', '펌프최근분무량', '펌프일간누적분무량']
train_input_removed = remove_out(train_input, a)

mpl.rc('font', size = 10)
mpl.rc('axes', titlesize = 10)
figure, axes = plt.subplots(nrows = 14, ncols = 3)
plt.tight_layout()
figure.set_size_inches(50,50)
plt.rc('font', family = 'NanumSquare')


sns.boxplot(y='펌프상태',   data = train_input_removed, ax=axes[2,0])
sns.boxplot(y='펌프작동남은시간',   data = train_input_removed, ax=axes[2,1])
sns.boxplot(y='최근분무량',   data = train_input_removed, ax=axes[2,2])
sns.boxplot(y='일간누적분무량',   data = train_input_removed, ax=axes[3,0])
sns.boxplot(y='냉방상태',   data = train_input_removed, ax=axes[3,1])
sns.boxplot(y='냉방작동남은시간',   data = train_input_removed, ax=axes[3,2])
sns.boxplot(y='난방상태',   data = train_input_removed, ax=axes[4,0])
sns.boxplot(y='난방작동남은시간',   data = train_input_removed, ax=axes[4,1])
sns.boxplot(y='내부유동팬상태',   data = train_input_removed, ax=axes[4,2])
sns.boxplot(y='내부유동팬작동남은시간',   data = train_input_removed, ax=axes[5,0])
sns.boxplot(y='외부환기팬상태',   data = train_input_removed, ax=axes[5,1])
sns.boxplot(y='외부환기팬작동남은시간',   data = train_input_removed, ax=axes[5,2])
sns.boxplot(y='화이트 LED상태',   data = train_input_removed, ax=axes[6,0])
sns.boxplot(y='화이트 LED작동남은시간',   data = train_input_removed, ax=axes[6,1])
sns.boxplot(y='화이트 LED동작강도',   data = train_input_removed, ax=axes[6,2])
sns.boxplot(y='레드 LED상태',   data = train_input_removed, ax=axes[7,0])
sns.boxplot(y='레드 LED작동남은시간',   data = train_input_removed, ax=axes[7,1])
sns.boxplot(y='레드 LED동작강도',   data = train_input_removed, ax=axes[7,2])
sns.boxplot(y='블루 LED상태',   data = train_input_removed, ax=axes[8,0])
sns.boxplot(y='블루 LED작동남은시간',   data = train_input_removed, ax=axes[8,1])
sns.boxplot(y='블루 LED동작강도',   data = train_input_removed, ax=axes[8,2])
sns.boxplot(y='카메라상태',   data = train_input_removed, ax=axes[9,0])
sns.boxplot(y='냉방온도',   data = train_input_removed, ax=axes[9,1])
sns.boxplot(y='난방온도',   data = train_input_removed, ax=axes[9,2])
sns.boxplot(y='기준온도',   data = train_input_removed, ax=axes[10,0])
sns.boxplot(y='난방부하',   data = train_input_removed, ax=axes[10,1])
sns.boxplot(y='냉방부하',   data = train_input_removed, ax=axes[10,2])
sns.boxplot(y='총추정광량',   data = train_input_removed, ax=axes[11,0])
sns.boxplot(y='백색광추정광량',   data = train_input_removed, ax=axes[11,1])
sns.boxplot(y='적색광추정광량',   data = train_input_removed, ax=axes[11,2])
sns.boxplot(y='청색광추정광량',   data = train_input_removed, ax=axes[12,0])
sns.boxplot(y='외부온도추정관측치',   data = train_input_removed, ax=axes[12,1])
sns.boxplot(y='외부습도추정관측치',   data = train_input_removed, ax=axes[12,2])
sns.boxplot(y='펌프최근분무량',   data = train_input_removed, ax=axes[13,0])
sns.boxplot(y='펌프일간누적분무량',   data = train_input_removed, ax=axes[13,1])

#이상한 값들 제외

train_input1=train_input.drop(['펌프상태','냉방상태','난방상태', '난방작동남은시간','내부유동팬상태',
                               '내부유동팬작동남은시간','외부환기팬상태','화이트 LED상태',
                               '레드 LED상태','블루 LED상태','카메라상태','펌프작동남은시간.1',
                               '펌프작동남은시간','외부환기팬작동남은시간','난방부하','청색광추정광량',
                               '레드 LED동작강도','블루 LED동작강도','적색광추정광량'],axis = 1)
print(train_input1)

"""###* NaN값 처리"""

###train

train_input1
print(train_input1.isnull().sum())

#모든 열에 NaN 있는 행 제거
train_input2 = train_input1.dropna(subset=['내부온도관측치'])

train_input2.isnull().sum()

###test

test_input1.isnull().sum()

#모든 열에 NaN 있는 행 제거
test_input2 = test_input1.dropna(subset=['내부온도관측치'])

test_input2.isnull().sum()



"""###*??"""

#train_input1 했을 때 0값이 너무 많음

len(train_input1.loc[train_input1['최근분무량'] == 0.0])

#변수통일이 안됨

def remove_out(dataframe, remove_col):
    dff = dataframe
    for k in remove_col:
        level_1q = dff[k].quantile(0.25)
        level_3q = dff[k].quantile(0.75)
        IQR = level_3q - level_1q
        dff = dff[(dff[k] <= level_3q + (1.5* IQR)) & (dff[k] >= level_1q - (1.5 * IQR))]
        dff = dff.reset_index(drop=True)
    return dff


train_input_removed=remove_out(train_input1,  ['내부온도관측치','내부습도관측치', 'CO2관측치', 'EC관측치','냉방작동남은시간',
                                   '화이트 LED작동남은시간','화이트 LED동작강도', '레드 LED작동남은시간','블루 LED작동남은시간' ,
                                   '냉방온도','난방온도','기준온도','냉방부하'])


print(train_input_removed)

mpl.rc('font', size = 10)
mpl.rc('axes', titlesize = 10)
figure, axes = plt.subplots(nrows = 5, ncols = 3)
plt.tight_layout()
figure.set_size_inches(30,30)
plt.rc('font', family='NanumSquare')

sns.boxplot(y='내부온도관측치', data = train_input_removed, ax=axes[0,0])
sns.boxplot(y='내부습도관측치',   data = train_input_removed, ax=axes[0,1])
sns.boxplot(y='CO2관측치',   data = train_input_removed, ax=axes[0,2])
sns.boxplot(y='EC관측치',   data = train_input_removed, ax=axes[1,0])
sns.boxplot(y='냉방작동남은시간',   data = train_input_removed, ax=axes[1,1])
sns.boxplot(y='화이트 LED작동남은시간',   data = train_input_removed, ax=axes[1,2]) 
sns.boxplot(y='화이트 LED동작강도',   data = train_input_removed, ax=axes[2,0])
sns.boxplot(y='레드 LED작동남은시간',   data = train_input_removed, ax=axes[2,1])
sns.boxplot(y='블루 LED작동남은시간',   data = train_input_removed, ax=axes[2,2])
sns.boxplot(y='냉방온도',   data = train_input_removed, ax=axes[3,0])
sns.boxplot(y='난방온도',   data = train_input_removed, ax=axes[3,1])
sns.boxplot(y='기준온도',   data = train_input_removed, ax=axes[3,2])
sns.boxplot(y='냉방부하',   data = train_input_removed, ax=axes[4,0])



"""###* 변수 제거"""

list(train_input1)

test_input1=test_input.drop(['외부온도관측치','외부습도관측치','펌프상태','최근분무량', '일간누적분무량','냉방상태','난방상태',
                               '난방작동남은시간','내부유동팬상태', '내부유동팬작동남은시간','외부환기팬상태','화이트 LED상태',
                               '레드 LED상태','블루 LED상태','카메라상태','외부온도추정관측치',
                               '외부습도추정관측치','펌프최근분무량','펌프일간누적분무량',
                               '펌프작동남은시간','외부환기팬작동남은시간','난방부하','청색광추정광량','레드 LED동작강도',
                               '블루 LED동작강도','총추정광량','백색광추정광량','적색광추정광량'],axis=1)

list(test_input1)

"""###* train에서 input과 target 합치기 위해 데이터 살피기"""

train_input2.head()

train_target.head()

# input에서 2021-02-17 00:00:00 ~ 2021-02-17 23;59:00가 train에서 2021-02-18 00:00:00에 반영됨
# 2021-02-17 00:00:00 ~ 2021-02-17 23;59:00 데이터를 평균내서 2021-02-18로 저장
# 이후 input과 target 합해주기





"""# train data - input과 target 병합

###* date 변수 생성
"""

#######train_input data

#날짜(date) 피쳐 생성
train_input2['date1'] = train_input2['시간'].apply(lambda x: x.split()[0])
train_input2.head()

# 일(day)에 +1 추가

pd.to_datetime(train_input2['date1']) #date의 data type을 datetime으로 수정

train_input2['date'] = pd.DatetimeIndex(train_input2['date1']) + timedelta(days=1)

train_input2.head()

#######train_target data

#target 날짜(date) 피쳐 생성
train_target['date'] = train_target['시간'].apply(lambda x: x.split()[0])

train_target['시간'] #train_target의 dtype은 object



"""###*  case와 시간별로 그룹화"""

#case별 & date별 평균
train_input_mean = train_input2.groupby(['case', 'date']).mean()
train_input_mean

train_input_mean = train_input_mean.reset_index()

##datetime to string -> Series로 출력해서 dataframe에 붙이기

a = train_input_mean['date']
a

dates = a.dt.strftime('%Y-%m-%d')
dates

dates1 = pd.Series(dates, name = 'dates')

train_input_object = pd.concat([train_input_mean, dates1], axis=1)
train_input_object

#case열과 dates행 합해줌
train_input_object['case_date'] = train_input_object['case'] +'_'+ train_input_object['dates']

#####train target data

train_target_mean = train_target.groupby(['case', 'date']).mean()
train_target_mean

#인덱스 리셋
train_target_mean = train_target_mean.reset_index()

#case열과 date행 합해줌
train_target_mean['case_date'] = train_target_mean['case'] +'_'+ train_target_mean['date']

train_target_mean

"""###* target과 input data 합해줌"""

#target과 input data 합해줌
train_result = pd.merge(train_target_mean, train_input_object, on= 'case_date', how = 'inner')
train_result

train_result=train_result.drop(['case_y', 'date_y'],axis=1)
train_result

list(train_result)

#train input - 데이터 반올림
train_result['내부온도관측치'] = train_result['내부온도관측치'].round()
train_result['내부습도관측치'] = train_result['내부습도관측치'].round()
train_result['CO2관측치'] = train_result['CO2관측치'].round()
train_result['EC관측치'] = train_result['EC관측치'].round()
train_result['냉방작동남은시간'] = train_result['냉방작동남은시간'].round()
train_result['화이트 LED작동남은시간'] = train_result['화이트 LED작동남은시간'].round()
train_result['화이트 LED동작강도'] = train_result['화이트 LED동작강도'].round()
train_result['레드 LED작동남은시간'] = train_result['레드 LED작동남은시간'].round()
train_result['블루 LED작동남은시간'] = train_result['블루 LED작동남은시간'].round()
train_result['냉방온도'] = train_result['냉방온도'].round()
train_result['난방온도'] = train_result['난방온도'].round()
train_result['기준온도'] = train_result['기준온도'].round()
train_result['냉방부하'] = train_result['냉방부하'].round()


train_result

"""# test data - input과 target 병합

###* date 변수 생성
"""

#######test_input data

#날짜(date) 피쳐 생성
test_input2['date1'] = test_input2['시간'].apply(lambda x: x.split()[0])
test_input2.head()

# 일(day)에 +1 추가

pd.to_datetime(test_input2['date1']) #date의 data type을 datetime으로 수정

test_input2['date'] = pd.DatetimeIndex(test_input2['date1']) + timedelta(days=1)

test_input2.head()

#######test_target data

#target 날짜(date) 피쳐 생성
test_target['date'] = test_target['시간'].apply(lambda x: x.split()[0])

test_target['시간'] #test_target의 dtype은 object



"""###*  case와 시간별로 그룹화"""

#case별 & date별 평균
test_input_mean = test_input2.groupby(['case', 'date']).mean()
test_input_mean

test_input_mean = test_input_mean.reset_index()

##datetime to string -> Series로 출력해서 dataframe에 붙이기

test_input_mean['date'].dt.strftime('%Y-%m-%d')

dates1 = pd.Series(test_input_mean['date'].dt.strftime('%Y-%m-%d'), name = 'dates')

test_input_object = pd.concat([test_input_mean, dates1], axis=1)
test_input_object

#case열과 dates행 합해줌
test_input_object['case_date'] = test_input_object['case'] +'_'+ test_input_object['dates']

#####test target data

test_target_mean = test_target.groupby(['case', 'date']).mean()
test_target_mean

#인덱스 리셋
test_target_mean = test_target_mean.reset_index()

#case열과 date행 합해줌
test_target_mean['case_date'] = test_target_mean['case'] +'_'+ test_target_mean['date']

test_target_mean

"""###* target과 input data 합해줌"""

#target과 input data 합해줌
test_result = pd.merge(test_target_mean, test_input_object, on= 'case_date', how = 'inner')
test_result

test_result=test_result.drop(['case_y', 'date_y'],axis=1)
test_result

list(test_result)

#test input - 데이터 반올림
test_result['내부온도관측치'] = test_result['내부온도관측치'].round()
test_result['내부습도관측치'] = test_result['내부습도관측치'].round()
test_result['CO2관측치'] = test_result['CO2관측치'].round()
test_result['EC관측치'] = test_result['EC관측치'].round()
test_result['냉방작동남은시간'] = test_result['냉방작동남은시간'].round()
test_result['화이트 LED작동남은시간'] = test_result['화이트 LED작동남은시간'].round()
test_result['화이트 LED동작강도'] = test_result['화이트 LED동작강도'].round()
test_result['레드 LED작동남은시간'] = test_result['레드 LED작동남은시간'].round()
test_result['블루 LED작동남은시간'] = test_result['블루 LED작동남은시간'].round()
test_result['냉방온도'] = test_result['냉방온도'].round()
test_result['난방온도'] = test_result['난방온도'].round()
test_result['기준온도'] = test_result['기준온도'].round()
test_result['냉방부하'] = test_result['냉방부하'].round()


test_result

"""# csv 파일로 저장"""

test_result.to_csv('test_result.csv')

train_result.to_csv('train_result.csv')

