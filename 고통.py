# -*- coding: utf-8 -*-
"""고통.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gp6FXHq8PXyJKPHD1Vc7SHDdG5Z71xpC
"""

!nvidia-smi

import random
import pandas as pd
import numpy as np
import os
import glob

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader

from tqdm.auto import tqdm
from keras.preprocessing import sequence
from keras.preprocessing.sequence import pad_sequences

import warnings
warnings.filterwarnings(action='ignore')

device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

CFG = {
    'EPOCHS':5,
    'LEARNING_RATE':1e-3,
    'BATCH_SIZE':16,
    'SEED':41
}

def seed_everything(seed):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = True

seed_everything(CFG['SEED']) # Seed 고정

# 구글 드라이브 연결
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
path='/content/drive/MyDrive/AI___/train_input_scaled.csv'
train_final=pd.read_csv(path, index_col=None, header=0)

path1='/content/drive/MyDrive/AI___/train_target_scaled.csv'
train_target=pd.read_csv(path1, index_col=None, header=0)

case01=train_final[train_final['case']=="CASE_01"]
case02=train_final[train_final['case']=="CASE_02"]
case03=train_final[train_final['case']=="CASE_03"]
case04=train_final[train_final['case']=="CASE_04"]
case05=train_final[train_final['case']=="CASE_05"]
case06=train_final[train_final['case']=="CASE_06"]
case07=train_final[train_final['case']=="CASE_07"]
case08=train_final[train_final['case']=="CASE_08"]
case09=train_final[train_final['case']=="CASE_09"]
case10=train_final[train_final['case']=="CASE_10"]
case11=train_final[train_final['case']=="CASE_11"]
case12=train_final[train_final['case']=="CASE_12"]
case13=train_final[train_final['case']=="CASE_13"]
case14=train_final[train_final['case']=="CASE_14"]
case15=train_final[train_final['case']=="CASE_15"]
case16=train_final[train_final['case']=="CASE_16"]
case17=train_final[train_final['case']=="CASE_17"]
case18=train_final[train_final['case']=="CASE_18"]
case19=train_final[train_final['case']=="CASE_19"]
case20=train_final[train_final['case']=="CASE_20"]
case21=train_final[train_final['case']=="CASE_21"]
case22=train_final[train_final['case']=="CASE_22"]
case23=train_final[train_final['case']=="CASE_23"]
case24=train_final[train_final['case']=="CASE_24"]
case25=train_final[train_final['case']=="CASE_25"]
case26=train_final[train_final['case']=="CASE_26"]
case27=train_final[train_final['case']=="CASE_27"]
case28=train_final[train_final['case']=="CASE_28"]
case29=train_final[train_final['case']=="CASE_29"]
case30=train_final[train_final['case']=="CASE_30"]
case31=train_final[train_final['case']=="CASE_31"]
case32=train_final[train_final['case']=="CASE_32"]
case33=train_final[train_final['case']=="CASE_33"]
case34=train_final[train_final['case']=="CASE_34"]
case35=train_final[train_final['case']=="CASE_35"]
case36=train_final[train_final['case']=="CASE_36"]
case37=train_final[train_final['case']=="CASE_37"]
case38=train_final[train_final['case']=="CASE_38"]
case39=train_final[train_final['case']=="CASE_39"]
case40=train_final[train_final['case']=="CASE_40"]
case41=train_final[train_final['case']=="CASE_41"]
case42=train_final[train_final['case']=="CASE_42"]
case43=train_final[train_final['case']=="CASE_43"]
case44=train_final[train_final['case']=="CASE_44"]
case45=train_final[train_final['case']=="CASE_45"]
case46=train_final[train_final['case']=="CASE_46"]
case47=train_final[train_final['case']=="CASE_47"]
case48=train_final[train_final['case']=="CASE_48"]
case49=train_final[train_final['case']=="CASE_49"]
case50=train_final[train_final['case']=="CASE_50"]
case51=train_final[train_final['case']=="CASE_51"]
case52=train_final[train_final['case']=="CASE_52"]
case53=train_final[train_final['case']=="CASE_53"]
case54=train_final[train_final['case']=="CASE_54"]
case55=train_final[train_final['case']=="CASE_55"]
case56=train_final[train_final['case']=="CASE_56"]
case57=train_final[train_final['case']=="CASE_57"]
case58=train_final[train_final['case']=="CASE_58"]


case01.to_csv('case01.csv',index=False)
case02.to_csv('case02.csv',index=False)
case03.to_csv('case03.csv',index=False)
case04.to_csv('case04.csv',index=False)
case05.to_csv('case05.csv',index=False)
case06.to_csv('case06.csv',index=False)
case07.to_csv('case07.csv',index=False)
case08.to_csv('case08.csv',index=False)
case09.to_csv('case09.csv',index=False)
case10.to_csv('case10.csv',index=False)

case11.to_csv('case11.csv',index=False)
case12.to_csv('case12.csv',index=False)
case13.to_csv('case13.csv',index=False)
case14.to_csv('case14.csv',index=False)
case15.to_csv('case15.csv',index=False)
case16.to_csv('case16.csv',index=False)
case17.to_csv('case17.csv',index=False)
case18.to_csv('case18.csv',index=False)
case19.to_csv('case19.csv',index=False)
case20.to_csv('case20.csv',index=False)

case21.to_csv('case21.csv',index=False)
case22.to_csv('case22.csv',index=False)
case23.to_csv('case23.csv',index=False)
case24.to_csv('case24.csv',index=False)
case25.to_csv('case25.csv',index=False)
case26.to_csv('case26.csv',index=False)
case27.to_csv('case27.csv',index=False)
case28.to_csv('case28.csv',index=False)
case29.to_csv('case29.csv',index=False)
case30.to_csv('case30.csv',index=False)

case31.to_csv('case31.csv',index=False)
case32.to_csv('case32.csv',index=False)
case33.to_csv('case33.csv',index=False)
case34.to_csv('case34.csv',index=False)
case35.to_csv('case35.csv',index=False)
case36.to_csv('case36.csv',index=False)
case37.to_csv('case37.csv',index=False)
case38.to_csv('case38.csv',index=False)
case39.to_csv('case39.csv',index=False)
case40.to_csv('case40.csv',index=False)


case41.to_csv('case41.csv',index=False)
case42.to_csv('case42.csv',index=False)
case43.to_csv('case43.csv',index=False)
case44.to_csv('case44.csv',index=False)
case45.to_csv('case45.csv',index=False)
case46.to_csv('case46.csv',index=False)
case47.to_csv('case47.csv',index=False)
case48.to_csv('case48.csv',index=False)
case49.to_csv('case49.csv',index=False)
case50.to_csv('case50.csv',index=False)


case51.to_csv('case51.csv',index=False)
case52.to_csv('case52.csv',index=False)
case53.to_csv('case53.csv',index=False)
case54.to_csv('case54.csv',index=False)
case55.to_csv('case55.csv',index=False)
case56.to_csv('case56.csv',index=False)
case57.to_csv('case57.csv',index=False)
case58.to_csv('case58.csv',index=False)



ccase01=train_target[train_target['case']=="CASE_01"]
ccase02=train_target[train_target['case']=="CASE_02"]
ccase03=train_target[train_target['case']=="CASE_03"]
ccase04=train_target[train_target['case']=="CASE_04"]
ccase05=train_target[train_target['case']=="CASE_05"]
ccase06=train_target[train_target['case']=="CASE_06"]
ccase07=train_target[train_target['case']=="CASE_07"]
ccase08=train_target[train_target['case']=="CASE_08"]
ccase09=train_target[train_target['case']=="CASE_09"]
ccase10=train_target[train_target['case']=="CASE_10"]

ccase11=train_target[train_target['case']=="CASE_11"]
ccase12=train_target[train_target['case']=="CASE_12"]
ccase13=train_target[train_target['case']=="CASE_13"]
ccase14=train_target[train_target['case']=="CASE_14"]
ccase15=train_target[train_target['case']=="CASE_15"]
ccase16=train_target[train_target['case']=="CASE_16"]
ccase17=train_target[train_target['case']=="CASE_17"]
ccase18=train_target[train_target['case']=="CASE_18"]
ccase19=train_target[train_target['case']=="CASE_19"]
ccase20=train_target[train_target['case']=="CASE_20"]
ccase21=train_target[train_target['case']=="CASE_21"]
ccase22=train_target[train_target['case']=="CASE_22"]
ccase23=train_target[train_target['case']=="CASE_23"]
ccase24=train_target[train_target['case']=="CASE_24"]
ccase25=train_target[train_target['case']=="CASE_25"]
ccase26=train_target[train_target['case']=="CASE_26"]
ccase27=train_target[train_target['case']=="CASE_27"]
ccase28=train_target[train_target['case']=="CASE_28"]
ccase29=train_target[train_target['case']=="CASE_29"]
ccase30=train_target[train_target['case']=="CASE_30"]
ccase31=train_target[train_target['case']=="CASE_31"]
ccase32=train_target[train_target['case']=="CASE_32"]
ccase33=train_target[train_target['case']=="CASE_33"]
ccase34=train_target[train_target['case']=="CASE_34"]
ccase35=train_target[train_target['case']=="CASE_35"]
ccase36=train_target[train_target['case']=="CASE_36"]
ccase37=train_target[train_target['case']=="CASE_37"]
ccase38=train_target[train_target['case']=="CASE_38"]
ccase39=train_target[train_target['case']=="CASE_39"]
ccase40=train_target[train_target['case']=="CASE_40"]

ccase41=train_target[train_target['case']=="CASE_41"]
ccase42=train_target[train_target['case']=="CASE_42"]
ccase43=train_target[train_target['case']=="CASE_43"]
ccase44=train_target[train_target['case']=="CASE_44"]
ccase45=train_target[train_target['case']=="CASE_45"]
ccase46=train_target[train_target['case']=="CASE_46"]
ccase47=train_target[train_target['case']=="CASE_47"]
ccase48=train_target[train_target['case']=="CASE_48"]
ccase49=train_target[train_target['case']=="CASE_49"]
ccase50=train_target[train_target['case']=="CASE_50"]

ccase51=train_target[train_target['case']=="CASE_51"]
ccase52=train_target[train_target['case']=="CASE_52"]
ccase53=train_target[train_target['case']=="CASE_53"]
ccase54=train_target[train_target['case']=="CASE_54"]
ccase55=train_target[train_target['case']=="CASE_55"]
ccase56=train_target[train_target['case']=="CASE_56"]
ccase57=train_target[train_target['case']=="CASE_57"]
ccase58=train_target[train_target['case']=="CASE_58"]


ccase01.to_csv('/content/drive/MyDrive/AI__/case01.csv',index=False)
ccase02.to_csv('/content/drive/MyDrive/AI__/case02.csv',index=False)
ccase03.to_csv('/content/drive/MyDrive/AI__/case03.csv',index=False)
ccase04.to_csv('/content/drive/MyDrive/AI__/case04.csv',index=False)
ccase05.to_csv('/content/drive/MyDrive/AI__/case05.csv',index=False)
ccase06.to_csv('/content/drive/MyDrive/AI__/case06.csv',index=False)
ccase07.to_csv('/content/drive/MyDrive/AI__/case07.csv',index=False)
ccase08.to_csv('/content/drive/MyDrive/AI__/case08.csv',index=False)
ccase09.to_csv('/content/drive/MyDrive/AI__/case09.csv',index=False)
ccase10.to_csv('/content/drive/MyDrive/AI__/case10.csv',index=False)

ccase11.to_csv('/content/drive/MyDrive/AI__/case11.csv',index=False)
ccase12.to_csv('/content/drive/MyDrive/AI__/case12.csv',index=False)
ccase13.to_csv('/content/drive/MyDrive/AI__/case13.csv',index=False)
ccase14.to_csv('/content/drive/MyDrive/AI__/case14.csv',index=False)
ccase15.to_csv('/content/drive/MyDrive/AI__/case15.csv',index=False)
ccase16.to_csv('/content/drive/MyDrive/AI__/case16.csv',index=False)
ccase17.to_csv('/content/drive/MyDrive/AI__/case17.csv',index=False)
ccase18.to_csv('/content/drive/MyDrive/AI__/case18.csv',index=False)
ccase19.to_csv('/content/drive/MyDrive/AI__/case19.csv',index=False)
ccase20.to_csv('/content/drive/MyDrive/AI__/case20.csv',index=False)

ccase21.to_csv('/content/drive/MyDrive/AI__/case21.csv',index=False)
ccase22.to_csv('/content/drive/MyDrive/AI__/case22.csv',index=False)
ccase23.to_csv('/content/drive/MyDrive/AI__/case23.csv',index=False)
ccase24.to_csv('/content/drive/MyDrive/AI__/case24.csv',index=False)
ccase25.to_csv('/content/drive/MyDrive/AI__/case25.csv',index=False)
ccase26.to_csv('/content/drive/MyDrive/AI__/case26.csv',index=False)
ccase27.to_csv('/content/drive/MyDrive/AI__/case27.csv',index=False)
ccase28.to_csv('/content/drive/MyDrive/AI__/case28.csv',index=False)
ccase29.to_csv('/content/drive/MyDrive/AI__/case29.csv',index=False)
ccase30.to_csv('/content/drive/MyDrive/AI__/case30.csv',index=False)

ccase31.to_csv('/content/drive/MyDrive/AI__/case31.csv',index=False)
ccase32.to_csv('/content/drive/MyDrive/AI__/case32.csv',index=False)
ccase33.to_csv('/content/drive/MyDrive/AI__/case33.csv',index=False)
ccase34.to_csv('/content/drive/MyDrive/AI__/case34.csv',index=False)
ccase35.to_csv('/content/drive/MyDrive/AI__/case35.csv',index=False)
ccase36.to_csv('/content/drive/MyDrive/AI__/case36.csv',index=False)
ccase37.to_csv('/content/drive/MyDrive/AI__/case37.csv',index=False)
ccase38.to_csv('/content/drive/MyDrive/AI__/case38.csv',index=False)
ccase39.to_csv('/content/drive/MyDrive/AI__/case39.csv',index=False)
ccase40.to_csv('/content/drive/MyDrive/AI__/case40.csv',index=False)

ccase41.to_csv('/content/drive/MyDrive/AI__/case41.csv',index=False)
ccase42.to_csv('/content/drive/MyDrive/AI__/case42.csv',index=False)
ccase43.to_csv('/content/drive/MyDrive/AI__/case43.csv',index=False)
ccase44.to_csv('/content/drive/MyDrive/AI__/case44.csv',index=False)
ccase45.to_csv('/content/drive/MyDrive/AI__/case45.csv',index=False)
ccase46.to_csv('/content/drive/MyDrive/AI__/case46.csv',index=False)
ccase47.to_csv('/content/drive/MyDrive/AI__/case47.csv',index=False)
ccase48.to_csv('/content/drive/MyDrive/AI__/case48.csv',index=False)
ccase49.to_csv('/content/drive/MyDrive/AI__/case49.csv',index=False)
ccase50.to_csv('/content/drive/MyDrive/AI__/case50.csv',index=False)

ccase51.to_csv('/content/drive/MyDrive/AI__/case51.csv',index=False)
ccase52.to_csv('/content/drive/MyDrive/AI__/case52.csv',index=False)
ccase53.to_csv('/content/drive/MyDrive/AI__/case53.csv',index=False)
ccase54.to_csv('/content/drive/MyDrive/AI__/case54.csv',index=False)
ccase55.to_csv('/content/drive/MyDrive/AI__/case55.csv',index=False)
ccase56.to_csv('/content/drive/MyDrive/AI__/case56.csv',index=False)
ccase57.to_csv('/content/drive/MyDrive/AI__/case57.csv',index=False)
ccase58.to_csv('/content/drive/MyDrive/AI__/case58.csv',index=False)

all_input_list = sorted(glob.glob('/content/*.csv'))
all_target_list = sorted(glob.glob('/content/drive/MyDrive/AI__/*.csv'))

all_input_list

all_target_list

case38['시간']=case38['시간'].apply(lambda x:x.split()[0])
case38['index1']=case38.index
input_02=case38['index1'].groupby(case38['시간']).size()
input_02

train_input_list = all_input_list[:50]
train_target_list = all_target_list[:50]

val_input_list = all_input_list[50:]
val_target_list = all_target_list[50:]

case01=case01.drop(case01.columns[-1],axis=1)
case02=case02.drop(case02.columns[-1],axis=1)
case03=case03.drop(case03.columns[-1],axis=1)
case04=case04.drop(case04.columns[-1],axis=1)
case05=case05.drop(case05.columns[-1],axis=1)
case06=case06.drop(case06.columns[-1],axis=1)
case07=case07.drop(case07.columns[-1],axis=1)
case08=case08.drop(case08.columns[-1],axis=1)
case09=case09.drop(case09.columns[-1],axis=1)
case10=case10.drop(case10.columns[-1],axis=1)
case11=case11.drop(case11.columns[-1],axis=1)
case12=case12.drop(case12.columns[-1],axis=1)
case13=case13.drop(case13.columns[-1],axis=1)
case14=case14.drop(case14.columns[-1],axis=1)
case15=case15.drop(case15.columns[-1],axis=1)
case16=case16.drop(case16.columns[-1],axis=1)
case17=case17.drop(case17.columns[-1],axis=1)
case18=case18.drop(case18.columns[-1],axis=1)
case19=case19.drop(case19.columns[-1],axis=1)
case20=case20.drop(case20.columns[-1],axis=1)
case21=case21.drop(case21.columns[-1],axis=1)
case22=case22.drop(case22.columns[-1],axis=1)
case23=case23.drop(case23.columns[-1],axis=1)
case24=case24.drop(case24.columns[-1],axis=1)
case25=case25.drop(case25.columns[-1],axis=1)
case26=case26.drop(case26.columns[-1],axis=1)
case27=case27.drop(case27.columns[-1],axis=1)
case28=case28.drop(case28.columns[-1],axis=1)
case29=case29.drop(case29.columns[-1],axis=1)
case30=case30.drop(case30.columns[-1],axis=1)
case31=case31.drop(case31.columns[-1],axis=1)
case32=case32.drop(case32.columns[-1],axis=1)
case33=case33.drop(case33.columns[-1],axis=1)
case34=case34.drop(case34.columns[-1],axis=1)
case35=case35.drop(case35.columns[-1],axis=1)
case36=case36.drop(case36.columns[-1],axis=1)
case37=case37.drop(case37.columns[-1],axis=1)
case38=case38.drop(case38.columns[-1],axis=1)
case39=case39.drop(case39.columns[-1],axis=1)
case40=case40.drop(case40.columns[-1],axis=1)
case41=case41.drop(case41.columns[-1],axis=1)
case42=case42.drop(case42.columns[-1],axis=1)
case43=case43.drop(case43.columns[-1],axis=1)
case44=case44.drop(case44.columns[-1],axis=1)
case45=case45.drop(case45.columns[-1],axis=1)
case46=case46.drop(case46.columns[-1],axis=1)
case47=case47.drop(case47.columns[-1],axis=1)
case48=case48.drop(case48.columns[-1],axis=1)
case49=case49.drop(case49.columns[-1],axis=1)
case50=case50.drop(case50.columns[-1],axis=1)
case51=case51.drop(case51.columns[-1],axis=1)
case52=case52.drop(case52.columns[-1],axis=1)
case53=case53.drop(case53.columns[-1],axis=1)
case54=case54.drop(case54.columns[-1],axis=1)
case55=case55.drop(case55.columns[-1],axis=1)
case56=case56.drop(case56.columns[-1],axis=1)
case57=case57.drop(case57.columns[-1],axis=1)
case58=case58.drop(case58.columns[-1],axis=1)

"""모델

"""

class CustomDataset(Dataset):
    def __init__(self, input_paths, target_paths, infer_mode):
        self.input_paths = input_paths
        self.target_paths = target_paths
        self.infer_mode = infer_mode
        
        self.data_list = []
        self.label_list = []
        print('Data Pre-processing..')
        for input_path, target_path in tqdm(zip(self.input_paths, self.target_paths)):
            input_df = pd.read_csv(input_path)
            target_df = pd.read_csv(target_path)

            input_df['시간']=input_df['시간'].apply(lambda x:x.split()[0])
            input_df['index1']=input_df.index
            input_df1=input_df['index1'].groupby(input_df['시간']).size()
            
            target_df = target_df.drop(columns=['case'])

            input_df = input_df.drop(columns=['case'])
            input_df = input_df.drop(columns=['시간'])
            
            
            
            for i in range(len(target_df)):
                
                input_length = int(len(input_df)/input_df1[i])
                target_length = int(len(target_df))
            
            for idx in range(target_length):
                time_series = input_df[(input_df1[idx]*(idx)):input_df1[idx]*(idx+1)].values
                time_series1 = torch.from_numpy(time_series)
                self.data_list.append(torch.Tensor(time_series1))

            for label in target_df["rate"]:
                self.label_list.append(label)
        print('Done.')


    def __getitem__(self, index):
        data = self.data_list[index]
        label = self.label_list[index]
        if self.infer_mode == False:
            return data, label
        else:
            return data


    def __len__(self):
        return len(self.data_list)

case01['시간']=case01['시간'].apply(lambda x:x.split()[0])
case01['index1']=case01.index
input_01=case01['index1'].groupby(case01['시간']).size()
input_01

train_dataset = CustomDataset(train_input_list, train_target_list, False)

train_loader = DataLoader(train_dataset, batch_size = CFG['BATCH_SIZE'], shuffle=True, num_workers=0)

val_dataset = CustomDataset(val_input_list, val_target_list, False)

val_loader = DataLoader(val_dataset, batch_size=CFG['BATCH_SIZE'], shuffle=False, num_workers=0)

train_dataset[17][0]=sequence.pad_sequences(train_dataset[17][0] , maxlen=1440 )

case01

train_dataset[0][0].size()
train_dataset[17][0].size()

train_dataset[17][0].reshape((1440,14))

class BaseModel(nn.Module):
    def __init__(self):
        super(BaseModel, self).__init__()
        self.lstm = nn.LSTM(input_size=37, hidden_size=256, batch_first=True, bidirectional=False)
        self.classifier = nn.Sequential(
            nn.Linear(256, 1),
        )
        
    def forward(self, x):
        hidden, _ = self.lstm(x)
        output = self.classifier(hidden[:,-1,:])
        return output

def train(model, optimizer, train_loader, val_loader, scheduler, device):
    model.to(device)
    criterion = nn.L1Loss().to(device)
    
    best_loss = 9999
    best_model = None
    for epoch in range(1, CFG['EPOCHS']+1):
        model.train()
        train_loss = []
        for X, Y in tqdm(iter(train_loader)):
            X = X.to(device)
            Y = Y.to(device)
            
            optimizer.zero_grad()
            
            output = model(X)
            loss = criterion(output, Y)
            
            loss.backward()
            optimizer.step()
            
            train_loss.append(loss.item())
                    
        val_loss = validation(model, val_loader, criterion, device)
        
        print(f'Train Loss : [{np.mean(train_loss):.5f}] Valid Loss : [{val_loss:.5f}]')
        
        if scheduler is not None:
            scheduler.step()
            
        if best_loss > val_loss:
            best_loss = val_loss
            best_model = model
    return best_model

def validation(model, val_loader, criterion, device):
    model.eval()
    val_loss = []
    with torch.no_grad():
        for X, Y in tqdm(iter(val_loader)):
            X = X.float().to(device)
            Y = Y.float().to(device)
            
            model_pred = model(X)
            loss = criterion(model_pred, Y)
            
            val_loss.append(loss.item())
            
    return np.mean(val_loss)

model = BaseModel()
model.eval()
optimizer = torch.optim.Adam(params = model.parameters(), lr = CFG["LEARNING_RATE"])
scheduler = None

best_model = train(model, optimizer, train_loader, val_loader, scheduler, device)

case37['시간']=case37['시간'].apply(lambda x:x.split()[0])
case37['index1']=case37.index
case37_1=case37['index1'].groupby(case37['시간']).size()
len(case37_1)

case38['시간']=case38['시간'].apply(lambda x:x.split()[0])
case38['index1']=case38.index
case38_1=case38['index1'].groupby(case38['시간']).size()
case38_1

Target_38=pd.read_csv('/content/drive/MyDrive/AI_competition/train_target/CASE_38.csv')

CASE_38=Target_38.drop(index=[9,10,11,13,15,16,17])

CASE_38.to_csv("CASE_38.csv",index=False)

case1=case1.drop(case1.columns[-1],axis=1)
        case2=case2.drop(case2.columns[-1],axis=1)
        case3=case3.drop(case3.columns[-1],axis=1)
        case4=case4.drop(case4.columns[-1],axis=1)
        case5=case5.drop(case5.columns[-1],axis=1)
        case6=case6.drop(case6.columns[-1],axis=1)
        case7=case7.drop(case7.columns[-1],axis=1)
        case8=case8.drop(case8.columns[-1],axis=1)
        case9=case9.drop(case9.columns[-1],axis=1)
        case10=case10.drop(case10.columns[-1],axis=1)
        case11=case11.drop(case11.columns[-1],axis=1)
        case12=case12.drop(case12.columns[-1],axis=1)
        case13=case13.drop(case13.columns[-1],axis=1)
        case14=case14.drop(case14.columns[-1],axis=1)
        case15=case15.drop(case15.columns[-1],axis=1)
        case16=case16.drop(case16.columns[-1],axis=1)
        case17=case17.drop(case17.columns[-1],axis=1)
        case18=case18.drop(case18.columns[-1],axis=1)
        case19=case19.drop(case19.columns[-1],axis=1)
        case20=case20.drop(case20.columns[-1],axis=1)
        case21=case21.drop(case21.columns[-1],axis=1)
        case22=case22.drop(case22.columns[-1],axis=1)
        case23=case23.drop(case23.columns[-1],axis=1)
        case24=case24.drop(case24.columns[-1],axis=1)
        case25=case25.drop(case25.columns[-1],axis=1)
        case26=case26.drop(case26.columns[-1],axis=1)
        case27=case27.drop(case27.columns[-1],axis=1)
        case28=case28.drop(case28.columns[-1],axis=1)
        case29=case29.drop(case29.columns[-1],axis=1)
        case30=case30.drop(case30.columns[-1],axis=1)
        case31=case31.drop(case31.columns[-1],axis=1)
        case32=case32.drop(case32.columns[-1],axis=1)
        case33=case33.drop(case33.columns[-1],axis=1)
        case34=case34.drop(case34.columns[-1],axis=1)
        case35=case35.drop(case35.columns[-1],axis=1)
        case36=case36.drop(case36.columns[-1],axis=1)
        case37=case37.drop(case37.columns[-1],axis=1)
        case38=case38.drop(case38.columns[-1],axis=1)
        case39=case39.drop(case39.columns[-1],axis=1)
        case40=case40.drop(case40.columns[-1],axis=1)
        case41=case41.drop(case41.columns[-1],axis=1)
        case42=case42.drop(case42.columns[-1],axis=1)
        case43=case43.drop(case43.columns[-1],axis=1)
        case44=case44.drop(case44.columns[-1],axis=1)
        case45=case45.drop(case45.columns[-1],axis=1)
        case46=case46.drop(case46.columns[-1],axis=1)
        case47=case47.drop(case47.columns[-1],axis=1)
        case48=case48.drop(case48.columns[-1],axis=1)
        case49=case49.drop(case49.columns[-1],axis=1)
        case50=case50.drop(case50.columns[-1],axis=1)
        case51=case51.drop(case51.columns[-1],axis=1)
        case52=case52.drop(case52.columns[-1],axis=1)
        case53=case53.drop(case53.columns[-1],axis=1)
        case54=case54.drop(case54.columns[-1],axis=1)
        case55=case55.drop(case55.columns[-1],axis=1)
        case56=case56.drop(case56.columns[-1],axis=1)
        case57=case57.drop(case57.columns[-1],axis=1)
        case58=case58.drop(case58.columns[-1],axis=1)